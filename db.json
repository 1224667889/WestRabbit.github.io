{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/tag-bg.jpg","path":"img/tag-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg-o.jpg","path":"img/home-bg-o.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.css","path":"css/hux-blog.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"themes/huxblog/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/huxblog/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"source/img/about-bg.jpg","path":"img/about-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/home-bg.jpg","path":"img/home-bg.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/huxblog/README.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474783775961},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1474783775851},{"_id":"source/CNAME","hash":"5f6b34ecad409dd4749c0eb030618b5d129489f0","modified":1474783775855},{"_id":"themes/huxblog/LICENSE","hash":"2b209f06bebeb2a8c2b7e187e436f3e1e1fbc8a7","modified":1474783775960},{"_id":"themes/huxblog/_config.yml","hash":"5d235aa7716657282795ee86d9c9db2374197a66","modified":1474783775964},{"_id":"source/_posts/2016-09-08-formline-summary.markdown","hash":"50e18b4050560a486ccb53ea77e969bcd7731994","modified":1474789483716},{"_id":"source/_posts/2016-09-20-Wamp-Configure-1.md","hash":"10da62f2c05e91c68f8dd0a97f338bb33ee6929c","modified":1474789454388},{"_id":"source/_posts/2016-09-24-how-to-post.markdown","hash":"714f1e63bf38ecd15155919055ead9873c44e01d","modified":1474789498748},{"_id":"source/about/index.md","hash":"3a216d86344ae3c608126f675272332378821498","modified":1474786269914},{"_id":"source/archives/index.md","hash":"f30bcd9cd0fbe690c2398f21dbf27e56c0c72499","modified":1474783775906},{"_id":"source/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1474783775921},{"_id":"source/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1474783775943},{"_id":"source/tags/index.md","hash":"0bc541f4c6a0f21bec67b6717ee86226f0eddf39","modified":1474783775953},{"_id":"themes/huxblog/languages_to_be_added/de.yml","hash":"424a9c1e6ab69334d7873f6574da02ca960aa572","modified":1474783775969},{"_id":"themes/huxblog/languages_to_be_added/default.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1474783775973},{"_id":"themes/huxblog/languages_to_be_added/en.yml","hash":"97326c9e6518d9f379778178b3b8f9a58434725d","modified":1474783775973},{"_id":"themes/huxblog/languages_to_be_added/es.yml","hash":"cb4eeca0ed3768a77e0cd216300f2b2549628b1b","modified":1474783775976},{"_id":"themes/huxblog/languages_to_be_added/no.yml","hash":"8ca475a3b4f8efe6603030f0013aae39668230e1","modified":1474783775979},{"_id":"themes/huxblog/languages_to_be_added/pl.yml","hash":"de7eb5850ae65ba7638e907c805fea90617a988c","modified":1474783775983},{"_id":"themes/huxblog/languages_to_be_added/ru.yml","hash":"42df7afeb7a35dc46d272b7f4fb880a9d9ebcaa5","modified":1474783775987},{"_id":"themes/huxblog/languages_to_be_added/zh-CN.yml","hash":"7bfcb0b8e97d7e5edcfca8ab26d55d9da2573c1c","modified":1474783775991},{"_id":"themes/huxblog/languages_to_be_added/zh-TW.yml","hash":"9acac6cc4f8002c3fa53ff69fb8cf66c915bd016","modified":1474783775996},{"_id":"themes/huxblog/layout/404.ejs","hash":"a4d73541a53e56b7dd46249c6d27cb59f4d97422","modified":1474783776009},{"_id":"themes/huxblog/layout/about.ejs","hash":"7f56c71383ef6c156b56d79b3984e07cc466606a","modified":1474783776083},{"_id":"themes/huxblog/layout/archive.ejs","hash":"6c3ed5d914379319efe835a4aa505abbc616c328","modified":1474783776088},{"_id":"themes/huxblog/layout/archives.ejs","hash":"f0046e58cc1dd876133be2bf927aed2b1821cb3e","modified":1474783776099},{"_id":"themes/huxblog/layout/index.ejs","hash":"70ac58c46625300a70791e210daf446afa6d1cd4","modified":1474783776108},{"_id":"themes/huxblog/layout/keynote.ejs","hash":"16a4164c3d291131fb66078e8df93b31fe050040","modified":1474783776141},{"_id":"themes/huxblog/layout/layout.ejs","hash":"03e278a3b8bc4503183276b6130ac04a8d5b9865","modified":1474783776146},{"_id":"themes/huxblog/layout/page.ejs","hash":"3fde0787e883274563f9de5aaeb8130b667e132a","modified":1474783776182},{"_id":"themes/huxblog/layout/post.ejs","hash":"a9db023e8fa7277749eb4b0e6683f944aed3707e","modified":1474783776235},{"_id":"themes/huxblog/layout/tags.ejs","hash":"a51bf2828af20939d702de1fdae067439a1153c0","modified":1474783776246},{"_id":"source/img/favicon.ico","hash":"3c542cd9e5437d513a7b90c8dfb34f3cd6d3617b","modified":1474786147958},{"_id":"source/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1474783775948},{"_id":"source/_posts/2016-09-08-formline-summary/out-slice1-thin.png","hash":"87e93386db3a03342a45c1dcb32f4ed2be68e124","modified":1474783775874},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1474783775911},{"_id":"source/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1474783775932},{"_id":"themes/huxblog/layout/_partial/footer.ejs","hash":"4b859c2171054ecba1d70f0eabe09661a9f4f9eb","modified":1474783776045},{"_id":"themes/huxblog/layout/_partial/head.ejs","hash":"44d81c81d57844a109059c937f52169588fbd0ec","modified":1474783776058},{"_id":"themes/huxblog/layout/_partial/pagination.ejs","hash":"557d6bb069a1d48af49ae912994653f44b32a570","modified":1474783776072},{"_id":"themes/huxblog/layout/_partial/nav.ejs","hash":"4c905166c960852e9b9a3c9d5c680091e37b481f","modified":1474783776068},{"_id":"themes/huxblog/source/css/highlight.styl","hash":"e842080e6d580f0f70a7df71fbde3c4e49463c19","modified":1474783776265},{"_id":"themes/huxblog/source/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1474783776271},{"_id":"themes/huxblog/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1474783776277},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1474783776294},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1474783776309},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1474783776314},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1474783776320},{"_id":"themes/huxblog/source/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1474783776375},{"_id":"themes/huxblog/source/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1474783776384},{"_id":"themes/huxblog/source/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1474783776390},{"_id":"themes/huxblog/source/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1474783776475},{"_id":"themes/huxblog/source/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1474783776484},{"_id":"themes/huxblog/source/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1474783776259},{"_id":"themes/huxblog/source/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1474783776302},{"_id":"themes/huxblog/source/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1474783776347},{"_id":"themes/huxblog/source/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1474783776460},{"_id":"source/_posts/2016-09-08-formline-summary/out-slice1.png","hash":"a168de723b0d956805fca651b5acf3560ec516f1","modified":1474783775876},{"_id":"source/_posts/2016-09-24-how-to-post/git-clone.png","hash":"580a431fe946e2175c3903f50791a017598312c5","modified":1474783775890},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1474783775926},{"_id":"themes/huxblog/source/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1474783776254},{"_id":"source/_posts/2016-09-08-formline-summary/out-form3.jpeg","hash":"8bdcd4b939f875a5d54bf11eb4e9370abfc32226","modified":1474783775868},{"_id":"source/_posts/2016-09-08-formline-summary/out-slice.png","hash":"08c172ed06a04653eaeaed87c9758e4d18744d51","modified":1474783775872},{"_id":"themes/huxblog/source/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1474783776428},{"_id":"source/img/about-bg.jpg","hash":"b8fa9be1957e3ffb8559f25b45cc35792160beb9","modified":1475070877308},{"_id":"source/img/home-bg.jpg","hash":"034f6ee35087c2999233521105f459b22220c15e","modified":1474783775942},{"_id":"source/_posts/2016-09-08-formline-summary/slice.png","hash":"bc7407204a902bfff9177a1c4554a01b76ebc5c6","modified":1474783775883},{"_id":"public/404.html","hash":"cc3892f69e54bef45a97a617b2a68193995aa719","modified":1475070913184},{"_id":"public/archives/index.html","hash":"dadb195d0a2678e09f2dfb15b99066388db764b1","modified":1475070913184},{"_id":"public/tags/index.html","hash":"430d49a8ec7dcd5900e5d542447e4242606b1f12","modified":1475070913184},{"_id":"public/i_dont_wanna_use_default_archives/index.html","hash":"0fdc27931d4e1c2db01d6e8ae6cacef83b032668","modified":1475070913184},{"_id":"public/i_dont_wanna_use_default_archives/2016/index.html","hash":"bf177a32d13fcda7083928d375c775c88582f88c","modified":1475070913184},{"_id":"public/i_dont_wanna_use_default_archives/2016/08/index.html","hash":"8c6893c3ed7068ca3749e434dc6173bb3fadca58","modified":1475070913184},{"_id":"public/i_dont_wanna_use_default_archives/2016/09/index.html","hash":"6616652df7ec23c5964df56553af17a68d47a0b9","modified":1475070913184},{"_id":"public/tags/14级/index.html","hash":"59a9348d47f6bd8a88b39caa73393094bfa01ed4","modified":1475070913184},{"_id":"public/tags/图像处理/index.html","hash":"7b5301a95bc2251f351b08472feb66a0dcb27eb1","modified":1475070913184},{"_id":"public/tags/教程/index.html","hash":"4f7540a7d4004101e47af1554e2a5c2055ece4a1","modified":1475070913184},{"_id":"public/about/index.html","hash":"57de823ad09c66dcadcf2f242d55c108dd870420","modified":1475070913184},{"_id":"public/index.html","hash":"9fcbdd9f6cb541d386f9eb7d7468a13a1bea3136","modified":1475070913184},{"_id":"public/2016/09/24/2016-09-24-how-to-post/index.html","hash":"23b81a040167b33365f6db299fe23da334ce2600","modified":1475070913184},{"_id":"public/2016/09/20/2016-09-20-Wamp-Configure-1/index.html","hash":"59d99875f868b4e516b51e872137df167d881855","modified":1475070913184},{"_id":"public/2016/08/29/2016-09-08-formline-summary/index.html","hash":"b48a5cbec2e86785f4b6cdda8e4bd8fdf7565a73","modified":1475070913184},{"_id":"public/CNAME","hash":"5f6b34ecad409dd4749c0eb030618b5d129489f0","modified":1475070913216},{"_id":"public/img/avatar.jpg","hash":"49cfa597392c4a116584c07690efbbc06354acc7","modified":1475070913216},{"_id":"public/img/icon_wechat.png","hash":"7fdb00c9017236e05c1b3e6da38a2cc382fd69fa","modified":1475070913216},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1475070913216},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1475070913216},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1475070913216},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1475070913216},{"_id":"public/2016/08/29/2016-09-08-formline-summary/out-slice1-thin.png","hash":"87e93386db3a03342a45c1dcb32f4ed2be68e124","modified":1475070913216},{"_id":"public/img/tag-bg.jpg","hash":"8844274a812ae19e8f2a3b7e4e465342e63eb852","modified":1475070913716},{"_id":"public/img/favicon.ico","hash":"3c542cd9e5437d513a7b90c8dfb34f3cd6d3617b","modified":1475070913716},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"de51a8494180a6db074af2dee2383f0a363c5b08","modified":1475070913731},{"_id":"public/css/highlight.css","hash":"8bc5e670b028eda8097f58bdc85269c5124c2951","modified":1475070913747},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1475070913747},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1475070913747},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1475070913747},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1475070913747},{"_id":"public/css/hux-blog.css","hash":"c1b0a32ad8075ac09d99fb4d64a9fbc84163abf8","modified":1475070913747},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1475070913747},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1475070913747},{"_id":"public/css/bootstrap.min.css","hash":"973e37a8502921d56bc02bb55321f45b072b6f71","modified":1475070913747},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1475070913747},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1475070913747},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1475070913747},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1475070913747},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1475070913747},{"_id":"public/img/home-bg-o.jpg","hash":"990f6f9dd0ecb5348bfcc47305553d58c0d8f326","modified":1475070913747},{"_id":"public/2016/08/29/2016-09-08-formline-summary/out-slice1.png","hash":"a168de723b0d956805fca651b5acf3560ec516f1","modified":1475070913747},{"_id":"public/2016/09/24/2016-09-24-how-to-post/git-clone.png","hash":"580a431fe946e2175c3903f50791a017598312c5","modified":1475070913747},{"_id":"public/2016/08/29/2016-09-08-formline-summary/out-form3.jpeg","hash":"8bdcd4b939f875a5d54bf11eb4e9370abfc32226","modified":1475070913747},{"_id":"public/2016/08/29/2016-09-08-formline-summary/out-slice.png","hash":"08c172ed06a04653eaeaed87c9758e4d18744d51","modified":1475070913747},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1475070913747},{"_id":"public/img/about-bg.jpg","hash":"b8fa9be1957e3ffb8559f25b45cc35792160beb9","modified":1475070913934},{"_id":"public/img/home-bg.jpg","hash":"034f6ee35087c2999233521105f459b22220c15e","modified":1475070913934},{"_id":"public/2016/08/29/2016-09-08-formline-summary/slice.png","hash":"bc7407204a902bfff9177a1c4554a01b76ebc5c6","modified":1475070914091}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2016-09-25T06:09:35.851Z","updated":"2016-09-25T06:09:35.851Z","path":"404.html","title":"","comments":1,"_id":"citibpy7l0000y8kjnwuh3whb","content":"","excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-09-25T06:48:33.000Z","description":"Hey, we are West2ers","header-img":"img/about-bg.jpg","author":"Lizimeow","comments":1,"_content":"\n\n>写写代码，做做设计，看看产品。\n>世界那么大，我在西二，为你在线。\n\n# 西二在线的历史 \n\n&ensp;&ensp;1998年，那是一个春天，有那么一群热爱编程的学长学姐，在福大的老校区西二楼，架起网线，搭起电缆，创造了属于学生自己的一片天地。这是新中国成立以来，国内第一个大学生宿舍内网，风靡一时，受到了全国人民的重视。但随着时间的推移，在搬到新校区后，这份曾经的辉煌慢慢的淡出视线。\n\n&ensp;&ensp;就在某一天，一个风和日丽的下午，一群继往开来的探险者，在打扫活动室时偶然发现了那个祖上留传下来的，已经布满灰尘的“西二在线”的牌匾，擦了擦上面的灰尘，过往的画面似乎都在他们身边浮现，这么酷的组织怎么能就这样埋没在历史的长河中？就这样，这群开拓者们风风火火的再次扛起了西二在线的大旗，重新筹建了新校区的西二在线工作室，一直流传至今。\n\n&ensp;&ensp;绵延了18年的西二精神，振奋了几代数计学子，也成就了现在的我们。2011年，时任省委书记的叶双瑜同志在西二在线工作室，大笔一挥 写下了“引领潮流，当仁不让”的口号，成为我们引以为傲的座右铭。\n\n\n&ensp;&ensp;经过了五年的努力，现在西二在线已经成为了福州大学一个最具代表性的学生自主学习、创新的平台。形成了一支涵盖前端开发、后端开发、Java、iOS、Unity3D等各方面技术的优秀团队。\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-09-25 14:48:33\ndescription: \"Hey, we are West2ers\"\nheader-img: \"img/about-bg.jpg\"\nauthor:     \"Lizimeow\"\ncomments: true\n---\n\n\n>写写代码，做做设计，看看产品。\n>世界那么大，我在西二，为你在线。\n\n# 西二在线的历史 \n\n&ensp;&ensp;1998年，那是一个春天，有那么一群热爱编程的学长学姐，在福大的老校区西二楼，架起网线，搭起电缆，创造了属于学生自己的一片天地。这是新中国成立以来，国内第一个大学生宿舍内网，风靡一时，受到了全国人民的重视。但随着时间的推移，在搬到新校区后，这份曾经的辉煌慢慢的淡出视线。\n\n&ensp;&ensp;就在某一天，一个风和日丽的下午，一群继往开来的探险者，在打扫活动室时偶然发现了那个祖上留传下来的，已经布满灰尘的“西二在线”的牌匾，擦了擦上面的灰尘，过往的画面似乎都在他们身边浮现，这么酷的组织怎么能就这样埋没在历史的长河中？就这样，这群开拓者们风风火火的再次扛起了西二在线的大旗，重新筹建了新校区的西二在线工作室，一直流传至今。\n\n&ensp;&ensp;绵延了18年的西二精神，振奋了几代数计学子，也成就了现在的我们。2011年，时任省委书记的叶双瑜同志在西二在线工作室，大笔一挥 写下了“引领潮流，当仁不让”的口号，成为我们引以为傲的座右铭。\n\n\n&ensp;&ensp;经过了五年的努力，现在西二在线已经成为了福州大学一个最具代表性的学生自主学习、创新的平台。形成了一支涵盖前端开发、后端开发、Java、iOS、Unity3D等各方面技术的优秀团队。\n","updated":"2016-09-25T06:51:09.914Z","path":"about/index.html","_id":"citibpy8w0002y8kjaizmcl28","content":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，我在西二，为你在线。</p>\n</blockquote>\n<h1 id=\"西二在线的历史\"><a href=\"#西二在线的历史\" class=\"headerlink\" title=\"西二在线的历史\"></a>西二在线的历史</h1><p>&ensp;&ensp;1998年，那是一个春天，有那么一群热爱编程的学长学姐，在福大的老校区西二楼，架起网线，搭起电缆，创造了属于学生自己的一片天地。这是新中国成立以来，国内第一个大学生宿舍内网，风靡一时，受到了全国人民的重视。但随着时间的推移，在搬到新校区后，这份曾经的辉煌慢慢的淡出视线。</p>\n<p>&ensp;&ensp;就在某一天，一个风和日丽的下午，一群继往开来的探险者，在打扫活动室时偶然发现了那个祖上留传下来的，已经布满灰尘的“西二在线”的牌匾，擦了擦上面的灰尘，过往的画面似乎都在他们身边浮现，这么酷的组织怎么能就这样埋没在历史的长河中？就这样，这群开拓者们风风火火的再次扛起了西二在线的大旗，重新筹建了新校区的西二在线工作室，一直流传至今。</p>\n<p>&ensp;&ensp;绵延了18年的西二精神，振奋了几代数计学子，也成就了现在的我们。2011年，时任省委书记的叶双瑜同志在西二在线工作室，大笔一挥 写下了“引领潮流，当仁不让”的口号，成为我们引以为傲的座右铭。</p>\n<p>&ensp;&ensp;经过了五年的努力，现在西二在线已经成为了福州大学一个最具代表性的学生自主学习、创新的平台。形成了一支涵盖前端开发、后端开发、Java、iOS、Unity3D等各方面技术的优秀团队。</p>\n","excerpt":"","more":"<blockquote>\n<p>写写代码，做做设计，看看产品。<br>世界那么大，我在西二，为你在线。</p>\n</blockquote>\n<h1 id=\"西二在线的历史\"><a href=\"#西二在线的历史\" class=\"headerlink\" title=\"西二在线的历史\"></a>西二在线的历史</h1><p>&ensp;&ensp;1998年，那是一个春天，有那么一群热爱编程的学长学姐，在福大的老校区西二楼，架起网线，搭起电缆，创造了属于学生自己的一片天地。这是新中国成立以来，国内第一个大学生宿舍内网，风靡一时，受到了全国人民的重视。但随着时间的推移，在搬到新校区后，这份曾经的辉煌慢慢的淡出视线。</p>\n<p>&ensp;&ensp;就在某一天，一个风和日丽的下午，一群继往开来的探险者，在打扫活动室时偶然发现了那个祖上留传下来的，已经布满灰尘的“西二在线”的牌匾，擦了擦上面的灰尘，过往的画面似乎都在他们身边浮现，这么酷的组织怎么能就这样埋没在历史的长河中？就这样，这群开拓者们风风火火的再次扛起了西二在线的大旗，重新筹建了新校区的西二在线工作室，一直流传至今。</p>\n<p>&ensp;&ensp;绵延了18年的西二精神，振奋了几代数计学子，也成就了现在的我们。2011年，时任省委书记的叶双瑜同志在西二在线工作室，大笔一挥 写下了“引领潮流，当仁不让”的口号，成为我们引以为傲的座右铭。</p>\n<p>&ensp;&ensp;经过了五年的努力，现在西二在线已经成为了福州大学一个最具代表性的学生自主学习、创新的平台。形成了一支涵盖前端开发、后端开发、Java、iOS、Unity3D等各方面技术的优秀团队。</p>\n"},{"layout":"archives","title":"Archives","description":"Hey, this is Archives.","header-img":"img/tag-bg.jpg","_content":"","source":"archives/index.md","raw":"---\nlayout: \"archives\"\ntitle: \"Archives\"\ndescription: \"Hey, this is Archives.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2016-09-25T06:09:35.906Z","updated":"2016-09-25T06:09:35.906Z","path":"archives/index.html","comments":1,"_id":"citibpy920004y8kj2q09i2mo","content":"","excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/tag-bg.jpg","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/tag-bg.jpg\"\n---\n","date":"2016-09-25T06:09:35.953Z","updated":"2016-09-25T06:09:35.953Z","path":"tags/index.html","comments":1,"_id":"citibpy9e0007y8kjzp9dfayk","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"框线检测","subtitle":"最近弄的一个小东西,求轻喷_(:зゝ∠)_","date":"2016-08-28T16:00:00.000Z","author":"XushengLee","catalog":true,"_content":"\n# 目的\n\n在一个图表类的图中检测出表格线.\n\n# 效果比对\n\n![img](slice.png)\n\n![img](out-slice1.png)\n\n![img](out-slice.png)\n\n![img](out-form3.jpeg)\n\n# 实现思路\n\n读图->滤波->二值->细化->膨胀->Hough->画线.其中，必要时的多次二值和转灰度不再写出。      \n其中,滤波是为了尽量平滑线条和粘合一些断点,但内核不能过大,可以拿着源码试试,效果清奇.        \n细化下面有图,主要是为了让图像边框的特征更明显.        \n膨胀让细化后的线再适当变粗.否则,后面用Hough时会出问题,这跟Hough的实现有关.注:细化后,线的折角变化大\nHough,想了解的童鞋,百度,Google吧.\n\n# 源码\n\n    #include<cv.h>\n    #include <opencv2/opencv.hpp>\n    #include <highgui.h>\n    #include <vector>\n    #include <iostream>\n    \n    using namespace cv;\n    using namespace std;\n    \n    cv::Mat thinImage(const cv::Mat & src, const int maxIterations = -1)\n    {\n        assert(src.type() == CV_8UC1);\n        cv::Mat dst;\n        int width  = src.cols;\n        int height = src.rows;\n        src.copyTo(dst);\n        int count = 0;  //记录迭代次数\n        while (true)\n        {\n            count++;\n            if (maxIterations != -1 && count > maxIterations) //限制次数并且迭代次数到达\n                break;\n            std::vector<uchar *> mFlag; //用于标记需要删除的点\n            //对点标记\n            for (int i = 0; i < height ;++i)\n            {\n                uchar * p = dst.ptr<uchar>(i);\n                for (int j = 0; j < width; ++j)\n                {\n                    //如果满足四个条件，进行标记\n                    //  p9 p2 p3\n                    //  p8 p1 p4\n                    //  p7 p6 p5\n                    uchar p1 = p[j];\n                    if (p1 != 1) continue;\n                    uchar p4 = (j == width - 1) ? 0 : *(p + j + 1);\n                    uchar p8 = (j == 0) ? 0 : *(p + j - 1);\n                    uchar p2 = (i == 0) ? 0 : *(p - dst.step + j);\n                    uchar p3 = (i == 0 || j == width - 1) ? 0 : *(p - dst.step + j + 1);\n                    uchar p9 = (i == 0 || j == 0) ? 0 : *(p - dst.step + j - 1);\n                    uchar p6 = (i == height - 1) ? 0 : *(p + dst.step + j);\n                    uchar p5 = (i == height - 1 || j == width - 1) ? 0 : *(p + dst.step + j + 1);\n                    uchar p7 = (i == height - 1 || j == 0) ? 0 : *(p + dst.step + j - 1);\n                    if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) >= 2 && (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) <= 6)\n                    {\n                        int ap = 0;\n                        if (p2 == 0 && p3 == 1) ++ap;\n                        if (p3 == 0 && p4 == 1) ++ap;\n                        if (p4 == 0 && p5 == 1) ++ap;\n                        if (p5 == 0 && p6 == 1) ++ap;\n                        if (p6 == 0 && p7 == 1) ++ap;\n                        if (p7 == 0 && p8 == 1) ++ap;\n                        if (p8 == 0 && p9 == 1) ++ap;\n                        if (p9 == 0 && p2 == 1) ++ap;\n    \n                        if (ap == 1 && p2 * p4 * p6 == 0 && p4 * p6 * p8 == 0)\n                        {\n                            //标记\n                            mFlag.push_back(p+j);\n                        }\n                    }\n                }\n            }\n    \n            //将标记的点删除\n            for (std::vector<uchar *>::iterator i = mFlag.begin(); i != mFlag.end(); ++i)\n            {\n                **i = 0;\n            }\n    \n            //直到没有点满足，算法结束\n            if (mFlag.empty())\n            {\n                break;\n            }\n            else\n            {\n                mFlag.clear();//将mFlag清空\n            }\n    \n            //对点标记\n            for (int i = 0; i < height; ++i)\n            {\n                uchar * p = dst.ptr<uchar>(i);\n                for (int j = 0; j < width; ++j)\n                {\n                    //如果满足四个条件，进行标记\n                    //  p9 p2 p3\n                    //  p8 p1 p4\n                    //  p7 p6 p5\n                    uchar p1 = p[j];\n                    if (p1 != 1) continue;\n                    uchar p4 = (j == width - 1) ? 0 : *(p + j + 1);\n                    uchar p8 = (j == 0) ? 0 : *(p + j - 1);\n                    uchar p2 = (i == 0) ? 0 : *(p - dst.step + j);\n                    uchar p3 = (i == 0 || j == width - 1) ? 0 : *(p - dst.step + j + 1);\n                    uchar p9 = (i == 0 || j == 0) ? 0 : *(p - dst.step + j - 1);\n                    uchar p6 = (i == height - 1) ? 0 : *(p + dst.step + j);\n                    uchar p5 = (i == height - 1 || j == width - 1) ? 0 : *(p + dst.step + j + 1);\n                    uchar p7 = (i == height - 1 || j == 0) ? 0 : *(p + dst.step + j - 1);\n    \n                    if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) >= 2 && (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) <= 6)\n                    {\n                        int ap = 0;\n                        if (p2 == 0 && p3 == 1) ++ap;\n                        if (p3 == 0 && p4 == 1) ++ap;\n                        if (p4 == 0 && p5 == 1) ++ap;\n                        if (p5 == 0 && p6 == 1) ++ap;\n                        if (p6 == 0 && p7 == 1) ++ap;\n                        if (p7 == 0 && p8 == 1) ++ap;\n                        if (p8 == 0 && p9 == 1) ++ap;\n                        if (p9 == 0 && p2 == 1) ++ap;\n    \n                        if (ap == 1 && p2 * p4 * p8 == 0 && p2 * p6 * p8 == 0)\n                        {\n                            //标记\n                            mFlag.push_back(p+j);\n                        }\n                    }\n                }\n            }\n    \n            //将标记的点删除\n            for (std::vector<uchar *>::iterator i = mFlag.begin(); i != mFlag.end(); ++i)\n            {\n                **i = 0;\n            }\n    \n            //直到没有点满足，算法结束\n            if (mFlag.empty())\n            {\n                break;\n            }\n            else\n            {\n                mFlag.clear();//将mFlag清空\n            }\n        }\n        return dst;\n    }\n    \n    int main(){\n        Mat srcImage = imread(\"/Users/mac/Pictures/test/slice1.png\",0);\n        Mat midImage,midImage1,midImage2,dstImage;\n        GaussianBlur(srcImage,srcImage,Size(1,1),0,0);\n        threshold(srcImage, srcImage, 216,255, THRESH_BINARY);\n        bitwise_not(srcImage,midImage1);\n        threshold(midImage1, midImage2, 128, 1, THRESH_BINARY);\n        midImage = thinImage(midImage2);\n        midImage = midImage * 255;\n        //imwrite(\"/Users/mac/Pictures/test/out-slice1-thin.png\",midImage);\n        Mat element = getStructuringElement(MORPH_RECT,Size(3,3));\n        dilate(midImage, midImage, element);\n    \n        imshow(\"mid\", midImage);\n        waitKey(0);\n    \n        cvtColor(midImage,dstImage, CV_GRAY2BGR);\n        vector<Vec4i> lines;//定义一个矢量结构lines用于存放得到的线段矢量集合\n        HoughLinesP(midImage, lines, 1, CV_PI/180, 80, 100, 3 );//依次在图中绘制出每条线段\n        size_t i;\n        for( i = 0; i < lines.size(); i++ )\n        {\n            Vec4i l = lines[i];\n            line( dstImage, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(186,88,255), 1, CV_AA);\n        }\n        imshow(\"y\", dstImage);\n        waitKey(0);\n        imwrite(\"/Users/mac/Pictures/test/out-slice1.jpg\",dstImage);\n        return 0;\n    }\n其中,中间步骤中用到的thinImage函数转换图像后的效果效果图       \n通往此函数原作者的传送门[李青峰的csdn](http://blog.csdn.net/qianchenglenger/article/details/19332011)\n\n![img](out-slice1-thin.png)\n\n# 不足\n\n1. 短的线段检测不到 \n2. 图源不好时,线有可能会断\n3. 还有少量的误检现象\n\n# 结\n\n如果大家有什么想法和建议,请留下comments._(:зゝ∠)_,让我们共同进步\n\n","source":"_posts/2016-09-08-formline-summary.markdown","raw":"---\nlayout:      post\ntitle:      \"框线检测\"\nsubtitle:   \"最近弄的一个小东西,求轻喷_(:зゝ∠)_\"\ndate:       2016-08-29\nauthor:     \"XushengLee\"\ncatalog:    true\ntags:\n     - 14级\n     - 图像处理\n---\n\n# 目的\n\n在一个图表类的图中检测出表格线.\n\n# 效果比对\n\n![img](slice.png)\n\n![img](out-slice1.png)\n\n![img](out-slice.png)\n\n![img](out-form3.jpeg)\n\n# 实现思路\n\n读图->滤波->二值->细化->膨胀->Hough->画线.其中，必要时的多次二值和转灰度不再写出。      \n其中,滤波是为了尽量平滑线条和粘合一些断点,但内核不能过大,可以拿着源码试试,效果清奇.        \n细化下面有图,主要是为了让图像边框的特征更明显.        \n膨胀让细化后的线再适当变粗.否则,后面用Hough时会出问题,这跟Hough的实现有关.注:细化后,线的折角变化大\nHough,想了解的童鞋,百度,Google吧.\n\n# 源码\n\n    #include<cv.h>\n    #include <opencv2/opencv.hpp>\n    #include <highgui.h>\n    #include <vector>\n    #include <iostream>\n    \n    using namespace cv;\n    using namespace std;\n    \n    cv::Mat thinImage(const cv::Mat & src, const int maxIterations = -1)\n    {\n        assert(src.type() == CV_8UC1);\n        cv::Mat dst;\n        int width  = src.cols;\n        int height = src.rows;\n        src.copyTo(dst);\n        int count = 0;  //记录迭代次数\n        while (true)\n        {\n            count++;\n            if (maxIterations != -1 && count > maxIterations) //限制次数并且迭代次数到达\n                break;\n            std::vector<uchar *> mFlag; //用于标记需要删除的点\n            //对点标记\n            for (int i = 0; i < height ;++i)\n            {\n                uchar * p = dst.ptr<uchar>(i);\n                for (int j = 0; j < width; ++j)\n                {\n                    //如果满足四个条件，进行标记\n                    //  p9 p2 p3\n                    //  p8 p1 p4\n                    //  p7 p6 p5\n                    uchar p1 = p[j];\n                    if (p1 != 1) continue;\n                    uchar p4 = (j == width - 1) ? 0 : *(p + j + 1);\n                    uchar p8 = (j == 0) ? 0 : *(p + j - 1);\n                    uchar p2 = (i == 0) ? 0 : *(p - dst.step + j);\n                    uchar p3 = (i == 0 || j == width - 1) ? 0 : *(p - dst.step + j + 1);\n                    uchar p9 = (i == 0 || j == 0) ? 0 : *(p - dst.step + j - 1);\n                    uchar p6 = (i == height - 1) ? 0 : *(p + dst.step + j);\n                    uchar p5 = (i == height - 1 || j == width - 1) ? 0 : *(p + dst.step + j + 1);\n                    uchar p7 = (i == height - 1 || j == 0) ? 0 : *(p + dst.step + j - 1);\n                    if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) >= 2 && (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) <= 6)\n                    {\n                        int ap = 0;\n                        if (p2 == 0 && p3 == 1) ++ap;\n                        if (p3 == 0 && p4 == 1) ++ap;\n                        if (p4 == 0 && p5 == 1) ++ap;\n                        if (p5 == 0 && p6 == 1) ++ap;\n                        if (p6 == 0 && p7 == 1) ++ap;\n                        if (p7 == 0 && p8 == 1) ++ap;\n                        if (p8 == 0 && p9 == 1) ++ap;\n                        if (p9 == 0 && p2 == 1) ++ap;\n    \n                        if (ap == 1 && p2 * p4 * p6 == 0 && p4 * p6 * p8 == 0)\n                        {\n                            //标记\n                            mFlag.push_back(p+j);\n                        }\n                    }\n                }\n            }\n    \n            //将标记的点删除\n            for (std::vector<uchar *>::iterator i = mFlag.begin(); i != mFlag.end(); ++i)\n            {\n                **i = 0;\n            }\n    \n            //直到没有点满足，算法结束\n            if (mFlag.empty())\n            {\n                break;\n            }\n            else\n            {\n                mFlag.clear();//将mFlag清空\n            }\n    \n            //对点标记\n            for (int i = 0; i < height; ++i)\n            {\n                uchar * p = dst.ptr<uchar>(i);\n                for (int j = 0; j < width; ++j)\n                {\n                    //如果满足四个条件，进行标记\n                    //  p9 p2 p3\n                    //  p8 p1 p4\n                    //  p7 p6 p5\n                    uchar p1 = p[j];\n                    if (p1 != 1) continue;\n                    uchar p4 = (j == width - 1) ? 0 : *(p + j + 1);\n                    uchar p8 = (j == 0) ? 0 : *(p + j - 1);\n                    uchar p2 = (i == 0) ? 0 : *(p - dst.step + j);\n                    uchar p3 = (i == 0 || j == width - 1) ? 0 : *(p - dst.step + j + 1);\n                    uchar p9 = (i == 0 || j == 0) ? 0 : *(p - dst.step + j - 1);\n                    uchar p6 = (i == height - 1) ? 0 : *(p + dst.step + j);\n                    uchar p5 = (i == height - 1 || j == width - 1) ? 0 : *(p + dst.step + j + 1);\n                    uchar p7 = (i == height - 1 || j == 0) ? 0 : *(p + dst.step + j - 1);\n    \n                    if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) >= 2 && (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) <= 6)\n                    {\n                        int ap = 0;\n                        if (p2 == 0 && p3 == 1) ++ap;\n                        if (p3 == 0 && p4 == 1) ++ap;\n                        if (p4 == 0 && p5 == 1) ++ap;\n                        if (p5 == 0 && p6 == 1) ++ap;\n                        if (p6 == 0 && p7 == 1) ++ap;\n                        if (p7 == 0 && p8 == 1) ++ap;\n                        if (p8 == 0 && p9 == 1) ++ap;\n                        if (p9 == 0 && p2 == 1) ++ap;\n    \n                        if (ap == 1 && p2 * p4 * p8 == 0 && p2 * p6 * p8 == 0)\n                        {\n                            //标记\n                            mFlag.push_back(p+j);\n                        }\n                    }\n                }\n            }\n    \n            //将标记的点删除\n            for (std::vector<uchar *>::iterator i = mFlag.begin(); i != mFlag.end(); ++i)\n            {\n                **i = 0;\n            }\n    \n            //直到没有点满足，算法结束\n            if (mFlag.empty())\n            {\n                break;\n            }\n            else\n            {\n                mFlag.clear();//将mFlag清空\n            }\n        }\n        return dst;\n    }\n    \n    int main(){\n        Mat srcImage = imread(\"/Users/mac/Pictures/test/slice1.png\",0);\n        Mat midImage,midImage1,midImage2,dstImage;\n        GaussianBlur(srcImage,srcImage,Size(1,1),0,0);\n        threshold(srcImage, srcImage, 216,255, THRESH_BINARY);\n        bitwise_not(srcImage,midImage1);\n        threshold(midImage1, midImage2, 128, 1, THRESH_BINARY);\n        midImage = thinImage(midImage2);\n        midImage = midImage * 255;\n        //imwrite(\"/Users/mac/Pictures/test/out-slice1-thin.png\",midImage);\n        Mat element = getStructuringElement(MORPH_RECT,Size(3,3));\n        dilate(midImage, midImage, element);\n    \n        imshow(\"mid\", midImage);\n        waitKey(0);\n    \n        cvtColor(midImage,dstImage, CV_GRAY2BGR);\n        vector<Vec4i> lines;//定义一个矢量结构lines用于存放得到的线段矢量集合\n        HoughLinesP(midImage, lines, 1, CV_PI/180, 80, 100, 3 );//依次在图中绘制出每条线段\n        size_t i;\n        for( i = 0; i < lines.size(); i++ )\n        {\n            Vec4i l = lines[i];\n            line( dstImage, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(186,88,255), 1, CV_AA);\n        }\n        imshow(\"y\", dstImage);\n        waitKey(0);\n        imwrite(\"/Users/mac/Pictures/test/out-slice1.jpg\",dstImage);\n        return 0;\n    }\n其中,中间步骤中用到的thinImage函数转换图像后的效果效果图       \n通往此函数原作者的传送门[李青峰的csdn](http://blog.csdn.net/qianchenglenger/article/details/19332011)\n\n![img](out-slice1-thin.png)\n\n# 不足\n\n1. 短的线段检测不到 \n2. 图源不好时,线有可能会断\n3. 还有少量的误检现象\n\n# 结\n\n如果大家有什么想法和建议,请留下comments._(:зゝ∠)_,让我们共同进步\n\n","slug":"2016-09-08-formline-summary","published":1,"updated":"2016-09-25T07:44:43.716Z","comments":1,"photos":[],"link":"","_id":"citibpy8r0001y8kjbxks3k3x","content":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>在一个图表类的图中检测出表格线.</p>\n<h1 id=\"效果比对\"><a href=\"#效果比对\" class=\"headerlink\" title=\"效果比对\"></a>效果比对</h1><p><img src=\"slice.png\" alt=\"img\"></p>\n<p><img src=\"out-slice1.png\" alt=\"img\"></p>\n<p><img src=\"out-slice.png\" alt=\"img\"></p>\n<p><img src=\"out-form3.jpeg\" alt=\"img\"></p>\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><p>读图-&gt;滤波-&gt;二值-&gt;细化-&gt;膨胀-&gt;Hough-&gt;画线.其中，必要时的多次二值和转灰度不再写出。<br>其中,滤波是为了尽量平滑线条和粘合一些断点,但内核不能过大,可以拿着源码试试,效果清奇.<br>细化下面有图,主要是为了让图像边框的特征更明显.<br>膨胀让细化后的线再适当变粗.否则,后面用Hough时会出问题,这跟Hough的实现有关.注:细化后,线的折角变化大<br>Hough,想了解的童鞋,百度,Google吧.</p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><pre><code>#include&lt;cv.h&gt;\n#include &lt;opencv2/opencv.hpp&gt;\n#include &lt;highgui.h&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nusing namespace cv;\nusing namespace std;\n\ncv::Mat thinImage(const cv::Mat &amp; src, const int maxIterations = -1)\n{\n    assert(src.type() == CV_8UC1);\n    cv::Mat dst;\n    int width  = src.cols;\n    int height = src.rows;\n    src.copyTo(dst);\n    int count = 0;  //记录迭代次数\n    while (true)\n    {\n        count++;\n        if (maxIterations != -1 &amp;&amp; count &gt; maxIterations) //限制次数并且迭代次数到达\n            break;\n        std::vector&lt;uchar *&gt; mFlag; //用于标记需要删除的点\n        //对点标记\n        for (int i = 0; i &lt; height ;++i)\n        {\n            uchar * p = dst.ptr&lt;uchar&gt;(i);\n            for (int j = 0; j &lt; width; ++j)\n            {\n                //如果满足四个条件，进行标记\n                //  p9 p2 p3\n                //  p8 p1 p4\n                //  p7 p6 p5\n                uchar p1 = p[j];\n                if (p1 != 1) continue;\n                uchar p4 = (j == width - 1) ? 0 : *(p + j + 1);\n                uchar p8 = (j == 0) ? 0 : *(p + j - 1);\n                uchar p2 = (i == 0) ? 0 : *(p - dst.step + j);\n                uchar p3 = (i == 0 || j == width - 1) ? 0 : *(p - dst.step + j + 1);\n                uchar p9 = (i == 0 || j == 0) ? 0 : *(p - dst.step + j - 1);\n                uchar p6 = (i == height - 1) ? 0 : *(p + dst.step + j);\n                uchar p5 = (i == height - 1 || j == width - 1) ? 0 : *(p + dst.step + j + 1);\n                uchar p7 = (i == height - 1 || j == 0) ? 0 : *(p + dst.step + j - 1);\n                if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) &gt;= 2 &amp;&amp; (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) &lt;= 6)\n                {\n                    int ap = 0;\n                    if (p2 == 0 &amp;&amp; p3 == 1) ++ap;\n                    if (p3 == 0 &amp;&amp; p4 == 1) ++ap;\n                    if (p4 == 0 &amp;&amp; p5 == 1) ++ap;\n                    if (p5 == 0 &amp;&amp; p6 == 1) ++ap;\n                    if (p6 == 0 &amp;&amp; p7 == 1) ++ap;\n                    if (p7 == 0 &amp;&amp; p8 == 1) ++ap;\n                    if (p8 == 0 &amp;&amp; p9 == 1) ++ap;\n                    if (p9 == 0 &amp;&amp; p2 == 1) ++ap;\n\n                    if (ap == 1 &amp;&amp; p2 * p4 * p6 == 0 &amp;&amp; p4 * p6 * p8 == 0)\n                    {\n                        //标记\n                        mFlag.push_back(p+j);\n                    }\n                }\n            }\n        }\n\n        //将标记的点删除\n        for (std::vector&lt;uchar *&gt;::iterator i = mFlag.begin(); i != mFlag.end(); ++i)\n        {\n            **i = 0;\n        }\n\n        //直到没有点满足，算法结束\n        if (mFlag.empty())\n        {\n            break;\n        }\n        else\n        {\n            mFlag.clear();//将mFlag清空\n        }\n\n        //对点标记\n        for (int i = 0; i &lt; height; ++i)\n        {\n            uchar * p = dst.ptr&lt;uchar&gt;(i);\n            for (int j = 0; j &lt; width; ++j)\n            {\n                //如果满足四个条件，进行标记\n                //  p9 p2 p3\n                //  p8 p1 p4\n                //  p7 p6 p5\n                uchar p1 = p[j];\n                if (p1 != 1) continue;\n                uchar p4 = (j == width - 1) ? 0 : *(p + j + 1);\n                uchar p8 = (j == 0) ? 0 : *(p + j - 1);\n                uchar p2 = (i == 0) ? 0 : *(p - dst.step + j);\n                uchar p3 = (i == 0 || j == width - 1) ? 0 : *(p - dst.step + j + 1);\n                uchar p9 = (i == 0 || j == 0) ? 0 : *(p - dst.step + j - 1);\n                uchar p6 = (i == height - 1) ? 0 : *(p + dst.step + j);\n                uchar p5 = (i == height - 1 || j == width - 1) ? 0 : *(p + dst.step + j + 1);\n                uchar p7 = (i == height - 1 || j == 0) ? 0 : *(p + dst.step + j - 1);\n\n                if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) &gt;= 2 &amp;&amp; (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) &lt;= 6)\n                {\n                    int ap = 0;\n                    if (p2 == 0 &amp;&amp; p3 == 1) ++ap;\n                    if (p3 == 0 &amp;&amp; p4 == 1) ++ap;\n                    if (p4 == 0 &amp;&amp; p5 == 1) ++ap;\n                    if (p5 == 0 &amp;&amp; p6 == 1) ++ap;\n                    if (p6 == 0 &amp;&amp; p7 == 1) ++ap;\n                    if (p7 == 0 &amp;&amp; p8 == 1) ++ap;\n                    if (p8 == 0 &amp;&amp; p9 == 1) ++ap;\n                    if (p9 == 0 &amp;&amp; p2 == 1) ++ap;\n\n                    if (ap == 1 &amp;&amp; p2 * p4 * p8 == 0 &amp;&amp; p2 * p6 * p8 == 0)\n                    {\n                        //标记\n                        mFlag.push_back(p+j);\n                    }\n                }\n            }\n        }\n\n        //将标记的点删除\n        for (std::vector&lt;uchar *&gt;::iterator i = mFlag.begin(); i != mFlag.end(); ++i)\n        {\n            **i = 0;\n        }\n\n        //直到没有点满足，算法结束\n        if (mFlag.empty())\n        {\n            break;\n        }\n        else\n        {\n            mFlag.clear();//将mFlag清空\n        }\n    }\n    return dst;\n}\n\nint main(){\n    Mat srcImage = imread(&quot;/Users/mac/Pictures/test/slice1.png&quot;,0);\n    Mat midImage,midImage1,midImage2,dstImage;\n    GaussianBlur(srcImage,srcImage,Size(1,1),0,0);\n    threshold(srcImage, srcImage, 216,255, THRESH_BINARY);\n    bitwise_not(srcImage,midImage1);\n    threshold(midImage1, midImage2, 128, 1, THRESH_BINARY);\n    midImage = thinImage(midImage2);\n    midImage = midImage * 255;\n    //imwrite(&quot;/Users/mac/Pictures/test/out-slice1-thin.png&quot;,midImage);\n    Mat element = getStructuringElement(MORPH_RECT,Size(3,3));\n    dilate(midImage, midImage, element);\n\n    imshow(&quot;mid&quot;, midImage);\n    waitKey(0);\n\n    cvtColor(midImage,dstImage, CV_GRAY2BGR);\n    vector&lt;Vec4i&gt; lines;//定义一个矢量结构lines用于存放得到的线段矢量集合\n    HoughLinesP(midImage, lines, 1, CV_PI/180, 80, 100, 3 );//依次在图中绘制出每条线段\n    size_t i;\n    for( i = 0; i &lt; lines.size(); i++ )\n    {\n        Vec4i l = lines[i];\n        line( dstImage, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(186,88,255), 1, CV_AA);\n    }\n    imshow(&quot;y&quot;, dstImage);\n    waitKey(0);\n    imwrite(&quot;/Users/mac/Pictures/test/out-slice1.jpg&quot;,dstImage);\n    return 0;\n}\n</code></pre><p>其中,中间步骤中用到的thinImage函数转换图像后的效果效果图<br>通往此函数原作者的传送门<a href=\"http://blog.csdn.net/qianchenglenger/article/details/19332011\" target=\"_blank\" rel=\"external\">李青峰的csdn</a></p>\n<p><img src=\"out-slice1-thin.png\" alt=\"img\"></p>\n<h1 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h1><ol>\n<li>短的线段检测不到 </li>\n<li>图源不好时,线有可能会断</li>\n<li>还有少量的误检现象</li>\n</ol>\n<h1 id=\"结\"><a href=\"#结\" class=\"headerlink\" title=\"结\"></a>结</h1><p>如果大家有什么想法和建议,请留下comments.<em>(:зゝ∠)</em>,让我们共同进步</p>\n","excerpt":"","more":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>在一个图表类的图中检测出表格线.</p>\n<h1 id=\"效果比对\"><a href=\"#效果比对\" class=\"headerlink\" title=\"效果比对\"></a>效果比对</h1><p><img src=\"slice.png\" alt=\"img\"></p>\n<p><img src=\"out-slice1.png\" alt=\"img\"></p>\n<p><img src=\"out-slice.png\" alt=\"img\"></p>\n<p><img src=\"out-form3.jpeg\" alt=\"img\"></p>\n<h1 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h1><p>读图-&gt;滤波-&gt;二值-&gt;细化-&gt;膨胀-&gt;Hough-&gt;画线.其中，必要时的多次二值和转灰度不再写出。<br>其中,滤波是为了尽量平滑线条和粘合一些断点,但内核不能过大,可以拿着源码试试,效果清奇.<br>细化下面有图,主要是为了让图像边框的特征更明显.<br>膨胀让细化后的线再适当变粗.否则,后面用Hough时会出问题,这跟Hough的实现有关.注:细化后,线的折角变化大<br>Hough,想了解的童鞋,百度,Google吧.</p>\n<h1 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h1><pre><code>#include&lt;cv.h&gt;\n#include &lt;opencv2/opencv.hpp&gt;\n#include &lt;highgui.h&gt;\n#include &lt;vector&gt;\n#include &lt;iostream&gt;\n\nusing namespace cv;\nusing namespace std;\n\ncv::Mat thinImage(const cv::Mat &amp; src, const int maxIterations = -1)\n{\n    assert(src.type() == CV_8UC1);\n    cv::Mat dst;\n    int width  = src.cols;\n    int height = src.rows;\n    src.copyTo(dst);\n    int count = 0;  //记录迭代次数\n    while (true)\n    {\n        count++;\n        if (maxIterations != -1 &amp;&amp; count &gt; maxIterations) //限制次数并且迭代次数到达\n            break;\n        std::vector&lt;uchar *&gt; mFlag; //用于标记需要删除的点\n        //对点标记\n        for (int i = 0; i &lt; height ;++i)\n        {\n            uchar * p = dst.ptr&lt;uchar&gt;(i);\n            for (int j = 0; j &lt; width; ++j)\n            {\n                //如果满足四个条件，进行标记\n                //  p9 p2 p3\n                //  p8 p1 p4\n                //  p7 p6 p5\n                uchar p1 = p[j];\n                if (p1 != 1) continue;\n                uchar p4 = (j == width - 1) ? 0 : *(p + j + 1);\n                uchar p8 = (j == 0) ? 0 : *(p + j - 1);\n                uchar p2 = (i == 0) ? 0 : *(p - dst.step + j);\n                uchar p3 = (i == 0 || j == width - 1) ? 0 : *(p - dst.step + j + 1);\n                uchar p9 = (i == 0 || j == 0) ? 0 : *(p - dst.step + j - 1);\n                uchar p6 = (i == height - 1) ? 0 : *(p + dst.step + j);\n                uchar p5 = (i == height - 1 || j == width - 1) ? 0 : *(p + dst.step + j + 1);\n                uchar p7 = (i == height - 1 || j == 0) ? 0 : *(p + dst.step + j - 1);\n                if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) &gt;= 2 &amp;&amp; (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) &lt;= 6)\n                {\n                    int ap = 0;\n                    if (p2 == 0 &amp;&amp; p3 == 1) ++ap;\n                    if (p3 == 0 &amp;&amp; p4 == 1) ++ap;\n                    if (p4 == 0 &amp;&amp; p5 == 1) ++ap;\n                    if (p5 == 0 &amp;&amp; p6 == 1) ++ap;\n                    if (p6 == 0 &amp;&amp; p7 == 1) ++ap;\n                    if (p7 == 0 &amp;&amp; p8 == 1) ++ap;\n                    if (p8 == 0 &amp;&amp; p9 == 1) ++ap;\n                    if (p9 == 0 &amp;&amp; p2 == 1) ++ap;\n\n                    if (ap == 1 &amp;&amp; p2 * p4 * p6 == 0 &amp;&amp; p4 * p6 * p8 == 0)\n                    {\n                        //标记\n                        mFlag.push_back(p+j);\n                    }\n                }\n            }\n        }\n\n        //将标记的点删除\n        for (std::vector&lt;uchar *&gt;::iterator i = mFlag.begin(); i != mFlag.end(); ++i)\n        {\n            **i = 0;\n        }\n\n        //直到没有点满足，算法结束\n        if (mFlag.empty())\n        {\n            break;\n        }\n        else\n        {\n            mFlag.clear();//将mFlag清空\n        }\n\n        //对点标记\n        for (int i = 0; i &lt; height; ++i)\n        {\n            uchar * p = dst.ptr&lt;uchar&gt;(i);\n            for (int j = 0; j &lt; width; ++j)\n            {\n                //如果满足四个条件，进行标记\n                //  p9 p2 p3\n                //  p8 p1 p4\n                //  p7 p6 p5\n                uchar p1 = p[j];\n                if (p1 != 1) continue;\n                uchar p4 = (j == width - 1) ? 0 : *(p + j + 1);\n                uchar p8 = (j == 0) ? 0 : *(p + j - 1);\n                uchar p2 = (i == 0) ? 0 : *(p - dst.step + j);\n                uchar p3 = (i == 0 || j == width - 1) ? 0 : *(p - dst.step + j + 1);\n                uchar p9 = (i == 0 || j == 0) ? 0 : *(p - dst.step + j - 1);\n                uchar p6 = (i == height - 1) ? 0 : *(p + dst.step + j);\n                uchar p5 = (i == height - 1 || j == width - 1) ? 0 : *(p + dst.step + j + 1);\n                uchar p7 = (i == height - 1 || j == 0) ? 0 : *(p + dst.step + j - 1);\n\n                if ((p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) &gt;= 2 &amp;&amp; (p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9) &lt;= 6)\n                {\n                    int ap = 0;\n                    if (p2 == 0 &amp;&amp; p3 == 1) ++ap;\n                    if (p3 == 0 &amp;&amp; p4 == 1) ++ap;\n                    if (p4 == 0 &amp;&amp; p5 == 1) ++ap;\n                    if (p5 == 0 &amp;&amp; p6 == 1) ++ap;\n                    if (p6 == 0 &amp;&amp; p7 == 1) ++ap;\n                    if (p7 == 0 &amp;&amp; p8 == 1) ++ap;\n                    if (p8 == 0 &amp;&amp; p9 == 1) ++ap;\n                    if (p9 == 0 &amp;&amp; p2 == 1) ++ap;\n\n                    if (ap == 1 &amp;&amp; p2 * p4 * p8 == 0 &amp;&amp; p2 * p6 * p8 == 0)\n                    {\n                        //标记\n                        mFlag.push_back(p+j);\n                    }\n                }\n            }\n        }\n\n        //将标记的点删除\n        for (std::vector&lt;uchar *&gt;::iterator i = mFlag.begin(); i != mFlag.end(); ++i)\n        {\n            **i = 0;\n        }\n\n        //直到没有点满足，算法结束\n        if (mFlag.empty())\n        {\n            break;\n        }\n        else\n        {\n            mFlag.clear();//将mFlag清空\n        }\n    }\n    return dst;\n}\n\nint main(){\n    Mat srcImage = imread(&quot;/Users/mac/Pictures/test/slice1.png&quot;,0);\n    Mat midImage,midImage1,midImage2,dstImage;\n    GaussianBlur(srcImage,srcImage,Size(1,1),0,0);\n    threshold(srcImage, srcImage, 216,255, THRESH_BINARY);\n    bitwise_not(srcImage,midImage1);\n    threshold(midImage1, midImage2, 128, 1, THRESH_BINARY);\n    midImage = thinImage(midImage2);\n    midImage = midImage * 255;\n    //imwrite(&quot;/Users/mac/Pictures/test/out-slice1-thin.png&quot;,midImage);\n    Mat element = getStructuringElement(MORPH_RECT,Size(3,3));\n    dilate(midImage, midImage, element);\n\n    imshow(&quot;mid&quot;, midImage);\n    waitKey(0);\n\n    cvtColor(midImage,dstImage, CV_GRAY2BGR);\n    vector&lt;Vec4i&gt; lines;//定义一个矢量结构lines用于存放得到的线段矢量集合\n    HoughLinesP(midImage, lines, 1, CV_PI/180, 80, 100, 3 );//依次在图中绘制出每条线段\n    size_t i;\n    for( i = 0; i &lt; lines.size(); i++ )\n    {\n        Vec4i l = lines[i];\n        line( dstImage, Point(l[0], l[1]), Point(l[2], l[3]), Scalar(186,88,255), 1, CV_AA);\n    }\n    imshow(&quot;y&quot;, dstImage);\n    waitKey(0);\n    imwrite(&quot;/Users/mac/Pictures/test/out-slice1.jpg&quot;,dstImage);\n    return 0;\n}\n</code></pre><p>其中,中间步骤中用到的thinImage函数转换图像后的效果效果图<br>通往此函数原作者的传送门<a href=\"http://blog.csdn.net/qianchenglenger/article/details/19332011\">李青峰的csdn</a></p>\n<p><img src=\"out-slice1-thin.png\" alt=\"img\"></p>\n<h1 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h1><ol>\n<li>短的线段检测不到 </li>\n<li>图源不好时,线有可能会断</li>\n<li>还有少量的误检现象</li>\n</ol>\n<h1 id=\"结\"><a href=\"#结\" class=\"headerlink\" title=\"结\"></a>结</h1><p>如果大家有什么想法和建议,请留下comments.<em>(:зゝ∠)</em>,让我们共同进步</p>\n"},{"title":"PHP集成环境WAMP简单配置指南","date":"2016-09-20T12:59:34.000Z","author":"RuphiLau","catalog":true,"_content":"# Wamp配置篇（一）\n为了将Wamp应用于实际站点搭设，需要对默认安装好的Wamp进行一些参数上的配置，以达到我们想要的效果\n\n### 一、默认无密码状态\nWamp的MySQL默认是没有密码的，这对于实际应用而言有诸多的不便，因此，我们先更改个密码。\n首先，打开MySQL的控制台，这时候会提示你：\n```\nPassword:\n```\n默认是空的，所以回车即可，进入后，输入：\n```\nuse mysql;\n```\n然后执行：\n```\nUPDATE user SET authentication_string=PASSWORD('密码') WHERE `user`='root';\n```\n这是对于MySQL5.7以上版本而言的，若为以下版本，则authentication_string用password替换，完成后，还应该执行以下语句让它生效：\n```\nflush privileges\n```\n\n----\n\n### 二、忘记MySQL密码，怎么办？\n编辑 **my.ini** 文件，打开后，找到\n```\nskip-grant-tables\n```\n去掉前面的“#“，然后这时候密码就为空了，再进入Mysql Console重复一的步骤即可\n\n----\n\n### 三、绑定域名\n1、编辑 **/conf/httpd.conf** 文件，搜索：\n```\nOptions +Indexs  +FollowSymLinks\n```\n将其改为：\n```\nOptions -Indexs  +FollowSymLinks\n```\n这一步是为了禁止列出目录，避免安全问题\n2、搜索：\n```\nAllowOverride all\n```\n在其下面加入：\n```\nRequire all granted\n```\n3、在Apache的conf/extra/httpd-vhost.conf文件里，加入：\n```\n<VirtualHost *:80>\n    DocumentRoot \"文件路径\"\n    ServerName 域名\n</VirtualHost>\n```","source":"_posts/2016-09-20-Wamp-Configure-1.md","raw":"---\ntitle: PHP集成环境WAMP简单配置指南\ndate: 2016-09-20 20:59:34\nauthor: \"RuphiLau\"\ncatalog: true\ntags:\n     - 14级\n     - 教程\n---\n# Wamp配置篇（一）\n为了将Wamp应用于实际站点搭设，需要对默认安装好的Wamp进行一些参数上的配置，以达到我们想要的效果\n\n### 一、默认无密码状态\nWamp的MySQL默认是没有密码的，这对于实际应用而言有诸多的不便，因此，我们先更改个密码。\n首先，打开MySQL的控制台，这时候会提示你：\n```\nPassword:\n```\n默认是空的，所以回车即可，进入后，输入：\n```\nuse mysql;\n```\n然后执行：\n```\nUPDATE user SET authentication_string=PASSWORD('密码') WHERE `user`='root';\n```\n这是对于MySQL5.7以上版本而言的，若为以下版本，则authentication_string用password替换，完成后，还应该执行以下语句让它生效：\n```\nflush privileges\n```\n\n----\n\n### 二、忘记MySQL密码，怎么办？\n编辑 **my.ini** 文件，打开后，找到\n```\nskip-grant-tables\n```\n去掉前面的“#“，然后这时候密码就为空了，再进入Mysql Console重复一的步骤即可\n\n----\n\n### 三、绑定域名\n1、编辑 **/conf/httpd.conf** 文件，搜索：\n```\nOptions +Indexs  +FollowSymLinks\n```\n将其改为：\n```\nOptions -Indexs  +FollowSymLinks\n```\n这一步是为了禁止列出目录，避免安全问题\n2、搜索：\n```\nAllowOverride all\n```\n在其下面加入：\n```\nRequire all granted\n```\n3、在Apache的conf/extra/httpd-vhost.conf文件里，加入：\n```\n<VirtualHost *:80>\n    DocumentRoot \"文件路径\"\n    ServerName 域名\n</VirtualHost>\n```","slug":"2016-09-20-Wamp-Configure-1","published":1,"updated":"2016-09-25T07:44:14.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"citibpy8y0003y8kjzjhi3klh","content":"<h1 id=\"Wamp配置篇（一）\"><a href=\"#Wamp配置篇（一）\" class=\"headerlink\" title=\"Wamp配置篇（一）\"></a>Wamp配置篇（一）</h1><p>为了将Wamp应用于实际站点搭设，需要对默认安装好的Wamp进行一些参数上的配置，以达到我们想要的效果</p>\n<h3 id=\"一、默认无密码状态\"><a href=\"#一、默认无密码状态\" class=\"headerlink\" title=\"一、默认无密码状态\"></a>一、默认无密码状态</h3><p>Wamp的MySQL默认是没有密码的，这对于实际应用而言有诸多的不便，因此，我们先更改个密码。<br>首先，打开MySQL的控制台，这时候会提示你：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">Password:</span></div></pre></td></tr></table></figure></p>\n<p>默认是空的，所以回车即可，进入后，输入：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">mysql</span>;</div></pre></td></tr></table></figure></p>\n<p>然后执行：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> authentication_string=<span class=\"keyword\">PASSWORD</span>(<span class=\"string\">'密码'</span>) <span class=\"keyword\">WHERE</span> <span class=\"string\">`user`</span>=<span class=\"string\">'root'</span>;</div></pre></td></tr></table></figure></p>\n<p>这是对于MySQL5.7以上版本而言的，若为以下版本，则authentication_string用password替换，完成后，还应该执行以下语句让它生效：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"二、忘记MySQL密码，怎么办？\"><a href=\"#二、忘记MySQL密码，怎么办？\" class=\"headerlink\" title=\"二、忘记MySQL密码，怎么办？\"></a>二、忘记MySQL密码，怎么办？</h3><p>编辑 <strong>my.ini</strong> 文件，打开后，找到<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">skip-<span class=\"keyword\">grant</span>-<span class=\"keyword\">tables</span></div></pre></td></tr></table></figure></p>\n<p>去掉前面的“#“，然后这时候密码就为空了，再进入Mysql Console重复一的步骤即可</p>\n<hr>\n<h3 id=\"三、绑定域名\"><a href=\"#三、绑定域名\" class=\"headerlink\" title=\"三、绑定域名\"></a>三、绑定域名</h3><p>1、编辑 <strong>/conf/httpd.conf</strong> 文件，搜索：<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> +Indexs  +FollowSymLinks</div></pre></td></tr></table></figure></p>\n<p>将其改为：<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> -Indexs  +FollowSymLinks</div></pre></td></tr></table></figure></p>\n<p>这一步是为了禁止列出目录，避免安全问题<br>2、搜索：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AllowOverride <span class=\"keyword\">all</span></div></pre></td></tr></table></figure></p>\n<p>在其下面加入：<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Require</span> <span class=\"literal\">all</span> granted</div></pre></td></tr></table></figure></p>\n<p>3、在Apache的conf/extra/httpd-vhost.conf文件里，加入：<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">&lt;VirtualHost *:80&gt;</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">DocumentRoot</span></span> <span class=\"string\">\"文件路径\"</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">ServerName</span></span> 域名</div><div class=\"line\"><span class=\"section\">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Wamp配置篇（一）\"><a href=\"#Wamp配置篇（一）\" class=\"headerlink\" title=\"Wamp配置篇（一）\"></a>Wamp配置篇（一）</h1><p>为了将Wamp应用于实际站点搭设，需要对默认安装好的Wamp进行一些参数上的配置，以达到我们想要的效果</p>\n<h3 id=\"一、默认无密码状态\"><a href=\"#一、默认无密码状态\" class=\"headerlink\" title=\"一、默认无密码状态\"></a>一、默认无密码状态</h3><p>Wamp的MySQL默认是没有密码的，这对于实际应用而言有诸多的不便，因此，我们先更改个密码。<br>首先，打开MySQL的控制台，这时候会提示你：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">Password:</span></div></pre></td></tr></table></figure></p>\n<p>默认是空的，所以回车即可，进入后，输入：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">mysql</span>;</div></pre></td></tr></table></figure></p>\n<p>然后执行：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> authentication_string=<span class=\"keyword\">PASSWORD</span>(<span class=\"string\">'密码'</span>) <span class=\"keyword\">WHERE</span> <span class=\"string\">`user`</span>=<span class=\"string\">'root'</span>;</div></pre></td></tr></table></figure></p>\n<p>这是对于MySQL5.7以上版本而言的，若为以下版本，则authentication_string用password替换，完成后，还应该执行以下语句让它生效：<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span></div></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"二、忘记MySQL密码，怎么办？\"><a href=\"#二、忘记MySQL密码，怎么办？\" class=\"headerlink\" title=\"二、忘记MySQL密码，怎么办？\"></a>二、忘记MySQL密码，怎么办？</h3><p>编辑 <strong>my.ini</strong> 文件，打开后，找到<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">skip-<span class=\"keyword\">grant</span>-<span class=\"keyword\">tables</span></div></pre></td></tr></table></figure></p>\n<p>去掉前面的“#“，然后这时候密码就为空了，再进入Mysql Console重复一的步骤即可</p>\n<hr>\n<h3 id=\"三、绑定域名\"><a href=\"#三、绑定域名\" class=\"headerlink\" title=\"三、绑定域名\"></a>三、绑定域名</h3><p>1、编辑 <strong>/conf/httpd.conf</strong> 文件，搜索：<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> +Indexs  +FollowSymLinks</div></pre></td></tr></table></figure></p>\n<p>将其改为：<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> -Indexs  +FollowSymLinks</div></pre></td></tr></table></figure></p>\n<p>这一步是为了禁止列出目录，避免安全问题<br>2、搜索：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">AllowOverride <span class=\"keyword\">all</span></div></pre></td></tr></table></figure></p>\n<p>在其下面加入：<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Require</span> <span class=\"literal\">all</span> granted</div></pre></td></tr></table></figure></p>\n<p>3、在Apache的conf/extra/httpd-vhost.conf文件里，加入：<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">&lt;VirtualHost *:80&gt;</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">DocumentRoot</span></span> <span class=\"string\">\"文件路径\"</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">ServerName</span></span> 域名</div><div class=\"line\"><span class=\"section\">&lt;/VirtualHost&gt;</span></div></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"How to post","subtitle":"博客使用教程","date":"2016-09-23T16:00:00.000Z","author":"XushengLee","catalog":true,"_content":"\n> A post a day, keep bugs away.\n\n\n# 环境\n\n我是用的Mac，windows下路径的写法不同，请注意。我以本教程post为例。\n\n# git clone\n\n在terminal下进入自己喜欢的目录下，使用\n\n` git clone https://github.com/WestRabbit/WestRabbit.github.io.git `\n\n那一长串是在下图拿到的\n![img](git-clone.png)\n\n\n<span style=\"color:#aaa;font-size:13px;\">或者用ssh...会比较方便..不用输密码..至于用法..自己百度一下...<del>懒得讲</del>...</span>\n\n# 文章编写\n文章存放在 `source/_posts` 这个目录下\n格式参照已有的文章\n命名格式也是\n不懂的地方问铷斐或者我（旭升）或者剩下的那几个谁...\n文章的tag:13级、14级、15级、Web、iOS、Java、图像处理、教程、工具、杂\n如果你们在这里没有找到合适的tag，先问一下那几个谁，然后再加...\n\n# 文章上传\n\n## git add\n\n当你在本地完成了编写之后。对每个你新建or修改过的文件or文件夹进行add，例如：\n    \n` git add ./source/_post/2014-09-24-how-to-post.markdown ` \n\n` git add ./source/_post/2014-09-24-how-to-post `\n\n## git commit\n\n在WestRabbit.github.io下\n\n` git commit `\n\n## git push origin source\n\n我们所用的分支叫做source。所以push到这里，同理在WestRabbit.github.io文件夹下\n\n` git push origin source `\n\n\n# 可选（ 不过还是建议大家装一下 ）\n## Hexo的安装和预览\n\n- 装Node\n\n- 切换淘宝源\n\n    ` npm i nrm -g --registry=https://registry.npm.taobao.org`\n\n    ` nrm use taobao `\n\n- 安装\n\n    ` npm i hexo-cli -g `\n\n- 在clone下来的目录底下\n\n    ` npm i `\n\n- 生成\n\n    ` hexo g `\n\n- 预览\n\n    ` hexo s `\n\n","source":"_posts/2016-09-24-how-to-post.markdown","raw":"---\nlayout:      post\ntitle:      \"How to post\"\nsubtitle:   \"博客使用教程\"\ndate:       2016-09-24\nauthor:     \"XushengLee\"\ncatalog:     true\ntags:\n     - 14级\n     - 教程\n---\n\n> A post a day, keep bugs away.\n\n\n# 环境\n\n我是用的Mac，windows下路径的写法不同，请注意。我以本教程post为例。\n\n# git clone\n\n在terminal下进入自己喜欢的目录下，使用\n\n` git clone https://github.com/WestRabbit/WestRabbit.github.io.git `\n\n那一长串是在下图拿到的\n![img](git-clone.png)\n\n\n<span style=\"color:#aaa;font-size:13px;\">或者用ssh...会比较方便..不用输密码..至于用法..自己百度一下...<del>懒得讲</del>...</span>\n\n# 文章编写\n文章存放在 `source/_posts` 这个目录下\n格式参照已有的文章\n命名格式也是\n不懂的地方问铷斐或者我（旭升）或者剩下的那几个谁...\n文章的tag:13级、14级、15级、Web、iOS、Java、图像处理、教程、工具、杂\n如果你们在这里没有找到合适的tag，先问一下那几个谁，然后再加...\n\n# 文章上传\n\n## git add\n\n当你在本地完成了编写之后。对每个你新建or修改过的文件or文件夹进行add，例如：\n    \n` git add ./source/_post/2014-09-24-how-to-post.markdown ` \n\n` git add ./source/_post/2014-09-24-how-to-post `\n\n## git commit\n\n在WestRabbit.github.io下\n\n` git commit `\n\n## git push origin source\n\n我们所用的分支叫做source。所以push到这里，同理在WestRabbit.github.io文件夹下\n\n` git push origin source `\n\n\n# 可选（ 不过还是建议大家装一下 ）\n## Hexo的安装和预览\n\n- 装Node\n\n- 切换淘宝源\n\n    ` npm i nrm -g --registry=https://registry.npm.taobao.org`\n\n    ` nrm use taobao `\n\n- 安装\n\n    ` npm i hexo-cli -g `\n\n- 在clone下来的目录底下\n\n    ` npm i `\n\n- 生成\n\n    ` hexo g `\n\n- 预览\n\n    ` hexo s `\n\n","slug":"2016-09-24-how-to-post","published":1,"updated":"2016-09-25T07:44:58.748Z","comments":1,"photos":[],"link":"","_id":"citibpy9b0006y8kjxda7bjja","content":"<blockquote>\n<p>A post a day, keep bugs away.</p>\n</blockquote>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>我是用的Mac，windows下路径的写法不同，请注意。我以本教程post为例。</p>\n<h1 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h1><p>在terminal下进入自己喜欢的目录下，使用</p>\n<p><code>git clone https://github.com/WestRabbit/WestRabbit.github.io.git</code></p>\n<p>那一长串是在下图拿到的<br><img src=\"git-clone.png\" alt=\"img\"></p>\n<p><span style=\"color:#aaa;font-size:13px;\">或者用ssh…会比较方便..不用输密码..至于用法..自己百度一下…<del>懒得讲</del>…</span></p>\n<h1 id=\"文章编写\"><a href=\"#文章编写\" class=\"headerlink\" title=\"文章编写\"></a>文章编写</h1><p>文章存放在 <code>source/_posts</code> 这个目录下<br>格式参照已有的文章<br>命名格式也是<br>不懂的地方问铷斐或者我（旭升）或者剩下的那几个谁…<br>文章的tag:13级、14级、15级、Web、iOS、Java、图像处理、教程、工具、杂<br>如果你们在这里没有找到合适的tag，先问一下那几个谁，然后再加…</p>\n<h1 id=\"文章上传\"><a href=\"#文章上传\" class=\"headerlink\" title=\"文章上传\"></a>文章上传</h1><h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h2><p>当你在本地完成了编写之后。对每个你新建or修改过的文件or文件夹进行add，例如：</p>\n<p><code>git add ./source/_post/2014-09-24-how-to-post.markdown</code> </p>\n<p><code>git add ./source/_post/2014-09-24-how-to-post</code></p>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h2><p>在WestRabbit.github.io下</p>\n<p><code>git commit</code></p>\n<h2 id=\"git-push-origin-source\"><a href=\"#git-push-origin-source\" class=\"headerlink\" title=\"git push origin source\"></a>git push origin source</h2><p>我们所用的分支叫做source。所以push到这里，同理在WestRabbit.github.io文件夹下</p>\n<p><code>git push origin source</code></p>\n<h1 id=\"可选（-不过还是建议大家装一下-）\"><a href=\"#可选（-不过还是建议大家装一下-）\" class=\"headerlink\" title=\"可选（ 不过还是建议大家装一下 ）\"></a>可选（ 不过还是建议大家装一下 ）</h1><h2 id=\"Hexo的安装和预览\"><a href=\"#Hexo的安装和预览\" class=\"headerlink\" title=\"Hexo的安装和预览\"></a>Hexo的安装和预览</h2><ul>\n<li><p>装Node</p>\n</li>\n<li><p>切换淘宝源</p>\n<p>  <code>npm i nrm -g --registry=https://registry.npm.taobao.org</code></p>\n<p>  <code>nrm use taobao</code></p>\n</li>\n<li><p>安装</p>\n<p>  <code>npm i hexo-cli -g</code></p>\n</li>\n<li><p>在clone下来的目录底下</p>\n<p>  <code>npm i</code></p>\n</li>\n<li><p>生成</p>\n<p>  <code>hexo g</code></p>\n</li>\n<li><p>预览</p>\n<p>  <code>hexo s</code></p>\n</li>\n</ul>\n","excerpt":"","more":"<blockquote>\n<p>A post a day, keep bugs away.</p>\n</blockquote>\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><p>我是用的Mac，windows下路径的写法不同，请注意。我以本教程post为例。</p>\n<h1 id=\"git-clone\"><a href=\"#git-clone\" class=\"headerlink\" title=\"git clone\"></a>git clone</h1><p>在terminal下进入自己喜欢的目录下，使用</p>\n<p><code>git clone https://github.com/WestRabbit/WestRabbit.github.io.git</code></p>\n<p>那一长串是在下图拿到的<br><img src=\"git-clone.png\" alt=\"img\"></p>\n<p><span style=\"color:#aaa;font-size:13px;\">或者用ssh…会比较方便..不用输密码..至于用法..自己百度一下…<del>懒得讲</del>…</span></p>\n<h1 id=\"文章编写\"><a href=\"#文章编写\" class=\"headerlink\" title=\"文章编写\"></a>文章编写</h1><p>文章存放在 <code>source/_posts</code> 这个目录下<br>格式参照已有的文章<br>命名格式也是<br>不懂的地方问铷斐或者我（旭升）或者剩下的那几个谁…<br>文章的tag:13级、14级、15级、Web、iOS、Java、图像处理、教程、工具、杂<br>如果你们在这里没有找到合适的tag，先问一下那几个谁，然后再加…</p>\n<h1 id=\"文章上传\"><a href=\"#文章上传\" class=\"headerlink\" title=\"文章上传\"></a>文章上传</h1><h2 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a>git add</h2><p>当你在本地完成了编写之后。对每个你新建or修改过的文件or文件夹进行add，例如：</p>\n<p><code>git add ./source/_post/2014-09-24-how-to-post.markdown</code> </p>\n<p><code>git add ./source/_post/2014-09-24-how-to-post</code></p>\n<h2 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a>git commit</h2><p>在WestRabbit.github.io下</p>\n<p><code>git commit</code></p>\n<h2 id=\"git-push-origin-source\"><a href=\"#git-push-origin-source\" class=\"headerlink\" title=\"git push origin source\"></a>git push origin source</h2><p>我们所用的分支叫做source。所以push到这里，同理在WestRabbit.github.io文件夹下</p>\n<p><code>git push origin source</code></p>\n<h1 id=\"可选（-不过还是建议大家装一下-）\"><a href=\"#可选（-不过还是建议大家装一下-）\" class=\"headerlink\" title=\"可选（ 不过还是建议大家装一下 ）\"></a>可选（ 不过还是建议大家装一下 ）</h1><h2 id=\"Hexo的安装和预览\"><a href=\"#Hexo的安装和预览\" class=\"headerlink\" title=\"Hexo的安装和预览\"></a>Hexo的安装和预览</h2><ul>\n<li><p>装Node</p>\n</li>\n<li><p>切换淘宝源</p>\n<p>  <code>npm i nrm -g --registry=https://registry.npm.taobao.org</code></p>\n<p>  <code>nrm use taobao</code></p>\n</li>\n<li><p>安装</p>\n<p>  <code>npm i hexo-cli -g</code></p>\n</li>\n<li><p>在clone下来的目录底下</p>\n<p>  <code>npm i</code></p>\n</li>\n<li><p>生成</p>\n<p>  <code>hexo g</code></p>\n</li>\n<li><p>预览</p>\n<p>  <code>hexo s</code></p>\n</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/2016-09-08-formline-summary/out-slice1.png","slug":"out-slice1.png","post":"citibpy8r0001y8kjbxks3k3x","modified":0,"renderable":0},{"_id":"source/_posts/2016-09-24-how-to-post/git-clone.png","slug":"git-clone.png","post":"citibpy9b0006y8kjxda7bjja","modified":0,"renderable":0},{"_id":"source/_posts/2016-09-08-formline-summary/out-form3.jpeg","slug":"out-form3.jpeg","post":"citibpy8r0001y8kjbxks3k3x","modified":0,"renderable":0},{"_id":"source/_posts/2016-09-08-formline-summary/out-slice.png","slug":"out-slice.png","post":"citibpy8r0001y8kjbxks3k3x","modified":0,"renderable":0},{"_id":"source/_posts/2016-09-08-formline-summary/out-slice1-thin.png","slug":"out-slice1-thin.png","post":"citibpy8r0001y8kjbxks3k3x","modified":0,"renderable":0},{"_id":"source/_posts/2016-09-08-formline-summary/slice.png","slug":"slice.png","post":"citibpy8r0001y8kjbxks3k3x","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"citibpy8r0001y8kjbxks3k3x","tag_id":"citibpy960005y8kjm05lgi2y","_id":"citibpy9q000ay8kjcf6g5btj"},{"post_id":"citibpy8r0001y8kjbxks3k3x","tag_id":"citibpy9h0008y8kj04rg57ne","_id":"citibpy9t000by8kjg0beqtyi"},{"post_id":"citibpy8y0003y8kjzjhi3klh","tag_id":"citibpy960005y8kjm05lgi2y","_id":"citibpy9w000ey8kjnf47dpb1"},{"post_id":"citibpy8y0003y8kjzjhi3klh","tag_id":"citibpy9u000cy8kjfq60i02y","_id":"citibpy9w000fy8kjy30l83qn"},{"post_id":"citibpy9b0006y8kjxda7bjja","tag_id":"citibpy960005y8kjm05lgi2y","_id":"citibpy9w000hy8kjghckuhyi"},{"post_id":"citibpy9b0006y8kjxda7bjja","tag_id":"citibpy9u000cy8kjfq60i02y","_id":"citibpy9w000iy8kju81m436e"}],"Tag":[{"name":"14级","_id":"citibpy960005y8kjm05lgi2y"},{"name":"图像处理","_id":"citibpy9h0008y8kj04rg57ne"},{"name":"教程","_id":"citibpy9u000cy8kjfq60i02y"}]}}